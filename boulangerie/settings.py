"""
Django settings for boulangerie project.

Generated by 'django-admin startproject' using Django 1.9.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""
import datetime
import os
from django.utils.six.moves import configparser#pylint:disable=import-error

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

#Import platform specific configuration
CONFIG = configparser.SafeConfigParser(allow_no_value=True)
CONFIG.read(os.environ.get('BOULANGERIE_INI', '/etc/boulangerie.ini'))

DEBUG = bool(int(CONFIG.get('general', 'debug')))
STATIC_URL = CONFIG.get('general', 'static_url')
STATIC_ROOT = CONFIG.get('general', 'static_root') or os.path.join(BASE_DIR, "static")
URI_TEMPLATE = CONFIG.get('general', 'uri_template')
ALLOWED_HOSTS = [CONFIG.get('security', 'allowed_host')]

BROKER = {
    'uri': CONFIG.get('broker', 'uri'),
}

QUOTAS = {
    'max_keys' : CONFIG.get('quotas', 'max_keys'),
    'max_projects' : CONFIG.get('quotas', 'max_projects'),
    'max_vpcs' : CONFIG.get('quotas', 'max_vpcs'),
    'max_organizations' : CONFIG.get('quotas', 'max_organizations'),
}

DATABASES = {
    'default': {
        'NAME': CONFIG.get('database', 'name'),
        'ENGINE': CONFIG.get('database', 'engine'),
        'USER': CONFIG.get('database', 'user'),
        'PASSWORD': CONFIG.get('database', 'password'),
        'HOST': CONFIG.get('database', 'host'),
        'PORT': CONFIG.get('database', 'port'),
        'ATOMIC_REQUESTS': True,
    }
}

SECRET_KEY = CONFIG.get('security', 'secret_key')

#Authorize all the web to query our API (can be a good thing to become popular)
CORS_ORIGIN_ALLOW_ALL = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #Django rest
    'django_filters',
    'rest_framework',
    'dry_rest_permissions',
    'corsheaders',
    #boulangerie apps
    'boulangerie.apps.accounts.apps.AccountsConfig',
    'boulangerie.apps.builds.apps.BuildsConfig',
    'boulangerie.apps.deployments.apps.DeploymentsConfig',
    'boulangerie.apps.keys.apps.KeysConfig',
    'boulangerie.apps.organizations.apps.OrganizationsConfig',
    'boulangerie.apps.projects.apps.ProjectsConfig',
    'boulangerie.apps.quotas.apps.QuotasConfig',
    'boulangerie.apps.vpcs.apps.VpcsConfig',
]


MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #boulangerie middlewares
    #'boulangerie.middlewares.profile.Profile',
]

ROOT_URLCONF = 'boulangerie.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'boulangerie.wsgi.application'


# Django REST Framework

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
}

# Authentication
AUTH_USER_MODEL = 'accounts.Account'


# Default JWT preferences
JWT_AUTH = {
    'JWT_ENCODE_HANDLER':
    'rest_framework_jwt.utils.jwt_encode_handler',

    'JWT_DECODE_HANDLER':
    'rest_framework_jwt.utils.jwt_decode_handler',

    'JWT_PAYLOAD_HANDLER':
    'rest_framework_jwt.utils.jwt_payload_handler',

    'JWT_PAYLOAD_GET_USER_ID_HANDLER':
    'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',

    'JWT_RESPONSE_PAYLOAD_HANDLER':
    'rest_framework_jwt.utils.jwt_response_payload_handler',

    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=3600),
    'JWT_AUDIENCE': None,
    'JWT_ISSUER': None,

    'JWT_ALLOW_REFRESH': False,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),

    'JWT_AUTH_HEADER_PREFIX': 'JWT',
}

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
